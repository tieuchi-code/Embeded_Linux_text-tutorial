In this instruction, we will learn how to write a simple driver module for BBB -> Hello kernel to print log that kernel is loaded or exited
Driver will create entry (/dev/gpiochip0, /dev/i2c-1 ....)
-> application will use driver to control LED

cd tisdk -> board support -> ti-kernel -> drivers
---------------------------------------------------------------
To write driver for kernel
cd ti-sdk -> boardsupport -> ti-kernel -> include -> linux -> init.h

search for "linux/init.h"
-> the file have funtion use for init
---------------------------------------------------------------

Create new project "Hello kernel"

create Hello_kernel.c

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>

static int __init hello_init(void)
{
    printk("[HELLO KERNEL DRIVER]: module loaded\n");
    return 0;
}

static void __exit hello_exit(void)
{
    printk("[HELLO KERNEL]: module exited\n");
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Tieu Chi");
MODULE_DESCRIPTION("Hello kernel demo");
module_init(hello_init);
module_exit(hello_exit);
---------------------------------------------------------------

Makefile

obj-m := Hello_kernel.o 
KERNELDIR=/home/tieuchi/ti-processor-sdk-linux-am335x-evm-09.03.05.02/board-support/ti-linux-kernel-6.1.119+gitAUTOINC+c490f4c0fe-ti
CURRENTDIR=$(shell pwd)
CROSS=/home/tieuchi/ti-processor-sdk-linux-am335x-evm-09.03.05.02/external-toolchain-dir/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-linux-gnueabihf/bin/arm-none-linux-gnueabihf-

all:
	$(MAKE) -C $(KERNELDIR) M=$(CURRENTDIR) ARCH=arm CROSS_COMPILE=$(CROSS) modules
clean:
	$(MAKE) -C $(KERNELDIR) M=$(CURRENTDIR) ARCH=arm CROSS_COMPILE=$(CROSS) clean
-----------------------------------------------------------------------------------
OK, now 2 file is done
to build Hello_kernel.ko

Host:

->make
->scp Hello_kernel.ko root@192.168.8.8:/home/root

BBB:

insmod Hello_kernel.ko
dmesg

you will see the log
[HELLO KERNEL DRIVER]: this module is loaded
-------------------------------------------------------------

to remove module
BBB:

rmmod Hello_kernel.ko
dmesg

you will see
[HELLO KERNEL]:module exited
---------------------------------------------------------

Fix magic version error

root@am335x-evm:~# insmod hello-kernel.ko                                                                             
[   93.497405] hello_kernel: version magic '6.1.119 preempt mod_unload ARMv7 p2v8 ' should be '6.1.119-ti-gc490f4c0fe'
insmod: ERROR: could not insert module hello-kernel.ko: Invalid module format        

this error happen because you are using a different version of zImage, you have to you zImage you built (zImage), not the one TI-SDK give (zImage-am335x-evm)
To fix this, you have to build zImage and boot again it to BBB, follow step below

1.Check
ti-sdk -> boardsupport -> built-image
if you see zImage -> OK
(or you can check in root/tftpboot)
if no zImage
	-> cd ti-sdk 
	-> make linux
	-> make linux_install
check in built-image again, there is zIamge file

check where is tftp server, often in root directory
-> cd / -> ls
tieuchi@tieuchi:/$ ls
bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  sys       tmp  var
boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   tftpboot  usr

copy zImage to tftpboot

-> cd ti-sdk -> boardsupport -> built-image
-> cp zImage /tftpboot/

Check again in tftpboot, there is zImage file

Now we have to fix setupBoard.com to boot zImage

->sudo vim setupBoard.minicom

send "setenv bootfile zImage"
send setenv bootcmd 'run findfdt; run init_console; setenv autoload no;tftp ${loadaddr} zImage; tftp ${fdtaddr} ${fdtfile}; bootz ${loadaddr} - ${fdtaddr}'

OK, now boot image again

ok, now insmod again
root@am335x-evm:~# insmod hello-kernel.ko                                                                             
[  127.969741] hello_kernel: loading out-of-tree module taints kernel.                                                
[  127.976554] [HELLO KERNEL DRIVER]: this module loaded     
-----------------------------------------------------------------------------

When you copy hello-kernel.ko to BBB, if it appear this error

Add correct host key to home/tieuchi/.shh/known_host

it require a hostkey, you remove the file, it's ok

rm home/tieuchi/.shh/known_host
--------------------------------------------------------------------------
===============================================================================================

Now we have to create sys/class/hello-kernel

#include <linux/device.h>

in file device.h has class.h
class.h provide a struct to create class
-------------------------------------------------------------------------------

update hello-kernel.c to create class

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/device.h>


struct class* hello_kernel_class;

static int __init hello_init(void)
{

    printk("[HELLO KERNEL DRIVER]: module loaded\n");
    hello_kernel_class = class_create (THIS_MODULE,"hello-kernel");
    if (IS_ERR(hello_kernel_class)) {
        printk("[HELLO KERNEL DRIVER]: create hello-kernel class failed");
        return -1;
    }
    return 0;
}

static void __exit hello_exit(void)
{
    printk("[HELLO KERNEL]: module exited\n");
    class_destroy(hello_kernel_class);
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Tieu Chi");
MODULE_DESCRIPTION("Hello kernel demo");
module_init(hello_init);
module_exit(hello_exit);
----------------------------------------------------------------------------

update Makefile

obj-m := hello-kernel.o 
KERNELDIR=/home/tieuchi/ti-processor-sdk-linux-am335x-evm-09.03.05.02/board-support/ti-linux-kernel-6.1.119+gitAUTOINC+c490f4c0fe-ti
CURRENTDIR=$(shell pwd)
CROSS=/home/tieuchi/ti-processor-sdk-linux-am335x-evm-09.03.05.02/external-toolchain-dir/arm-gnu-toolchain-11.3.rel1-x86_64-arm-none-linux-gnueabihf/bin/arm-none-linux-gnueabihf-

all:
	$(MAKE) -C $(KERNELDIR) M=$(CURRENTDIR) ARCH=arm CROSS_COMPILE=$(CROSS) modules
install:
	scp hello-kernel.ko root@192.168.8.8:/home/root
clean:
	$(MAKE) -C $(KERNELDIR) M=$(CURRENTDIR) ARCH=arm CROSS_COMPILE=$(CROSS) clean
help:
	$(MAKE) -C $(KERNELDIR) help

---------------------------------------------------------------------------

make -> make install

in BBB:
cd /sys/class
 
-------------------------------------------------

now create file in hello-kernel directory (test)

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/device.h>
#include <linux/kdev_t.h>

struct class* hello_kernel_class;
struct device* test_device;

static int __init hello_init(void)
{

    printk("[HELLO KERNEL DRIVER]: module loaded\n");
    hello_kernel_class = class_create (THIS_MODULE,"hello-kernel");
    if (IS_ERR(hello_kernel_class)) {
        printk("[HELLO KERNEL DRIVER]: create hello-kernel class failed\n");
        return -1;
    }
    test_device = device_create(hello_kernel_class,NULL, MKDEV(0,0), NULL, "test");
    if (IS_ERR(test_device)) {
        printk("[HELLO KERNEL DRIVER]: create test device failed\n");
        class_destroy(hello_kernel_class);
        return -1;

    }
    return 0;
}

static void __exit hello_exit(void)
{
    printk("[HELLO KERNEL]: module exited\n");
    device_destroy(hello_kernel_class, MKDEV(0,0));
    class_destroy(hello_kernel_class);
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Tieu Chi");
MODULE_DESCRIPTION("Hello kernel demo");
module_init(hello_init);
module_exit(hello_exit);
------------------------------------------------------------------------------------------

now create device0 in hello-kernel -> create test file in device0
read and write to test file

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/device.h>
#include <linux/kdev_t.h>


struct class* hello_kernel_class;
struct device* test_device;

ssize_t test_show(struct device *dev, struct device_attribute *attr, char *buf) 
{
    sprintf(buf, "hello\n");
    printk("[HELLO KERNEL DRIVER]: you just read /sys/class/hello-kernel/device0/test \n");
    return 6;
}

ssize_t test_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) 
{
    printk("[HELLO KERNEL DRIVER]: you just write [%s] to /sys/class/hello-kernel/device0/test \n", buf);
    return count;
}

DEVICE_ATTR_RW(test);

static int __init hello_init(void)
{

    printk("[HELLO KERNEL DRIVER]: module loaded\n");
    hello_kernel_class = class_create (THIS_MODULE,"hello-kernel");
    if (IS_ERR(hello_kernel_class)) {
        printk("[HELLO KERNEL DRIVER]: create hello-kernel class failed\n");
        return -1;
    }

    test_device = device_create(hello_kernel_class,NULL, MKDEV(0,0), NULL, "device0");
    if (IS_ERR(test_device)) {
        printk("[HELLO KERNEL DRIVER]: create device0 failed \n");
        class_destroy(hello_kernel_class);
        return -1;

    }

    int ret = device_create_file(test_device, &dev_attr_test);
    if (ret != 0) {
        printk("[HELLO KERNEL DRIVER]: create test file failed \n");
        device_destroy(hello_kernel_class, MKDEV(0,0));
        class_destroy(hello_kernel_class);
    }
    return 0;

}

static void __exit hello_exit(void)
{
    printk("[HELLO KERNEL]: module exited\n");
    device_remove_file(test_device, &dev_attr_test);
    device_destroy(hello_kernel_class, MKDEV(0,0));
    class_destroy(hello_kernel_class);
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Tieu Chi");
MODULE_DESCRIPTION("Hello kernel demo");
module_init(hello_init);
module_exit(hello_exit);

------------------------------------------------------------------------------------------

-> make
-> make install
-> cd /sys/class/hello-kernel/device0
-> cat test
	dmesg
		[ 6312.502667] [HELLO KERNEL DRIVER]: you just read /sys/class/hello-kernel/dev 
-> echo blabla>test
	dmesg
		[ 6379.523209] [HELLO KERNEL DRIVER]: you just write [blabla





