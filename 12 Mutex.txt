Mutex is use in linux kernel to protect online 1 app use 1 device at the same time

insert these sample hello kernel.c first, then we'll try to use mutex

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/device.h>
#include <linux/kdev_t.h>


struct class* hello_kernel_class;
struct device* test_device;

ssize_t test_show(struct device *dev, struct device_attribute *attr, char *buf) 
{
    sprintf(buf, "hello\n");
    printk("[HELLO KERNEL DRIVER]: you just read /sys/class/hello-kernel/device0/test \n");
    return 6;
}

ssize_t test_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) 
{
    printk("[HELLO KERNEL DRIVER]: you just write [%s] to /sys/class/hello-kernel/device0/test \n", buf);
    return count;
}

DEVICE_ATTR_RW(test);

static int __init hello_init(void)
{

    printk("[HELLO KERNEL DRIVER]: module loaded\n");
    hello_kernel_class = class_create (THIS_MODULE,"hello-kernel");
    if (IS_ERR(hello_kernel_class)) {
        printk("[HELLO KERNEL DRIVER]: create hello-kernel class failed\n");
        return -1;
    }

    test_device = device_create(hello_kernel_class,NULL, MKDEV(0,0), NULL, "device0");
    if (IS_ERR(test_device)) {
        printk("[HELLO KERNEL DRIVER]: create device0 failed \n");
        class_destroy(hello_kernel_class);
        return -1;

    }

    int ret = device_create_file(test_device, &dev_attr_test);
    if (ret != 0) {
        printk("[HELLO KERNEL DRIVER]: create test file failed \n");
        device_remove_file(test_device, &dev_attr_test);
        device_destroy(hello_kernel_class, MKDEV(0,0));
        class_destroy(hello_kernel_class);
    }
    return 0;

}

static void __exit hello_exit(void)
{
    printk("[HELLO KERNEL]: module exited\n");
    device_destroy(hello_kernel_class, MKDEV(0,0));
    class_destroy(hello_kernel_class);
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Tieu Chi");
MODULE_DESCRIPTION("Hello kernel demo");
module_init(hello_init);
module_exit(hello_exit);
----------------------------------------------------------------------

find linux/mutex.h
DEFINE_MUTEX(blabla_lock);

ssize_t test_show(struct device *dev, struct device_attribute *attr, char *buf) 
{
    mutex_lock(&blabla_lock);
    sprintf(buf, "hello\n");
    printk("[HELLO KERNEL DRIVER]: you just read /sys/class/hello-kernel/device0/test \n");
    mutex_unlock(&blabla_lock);
    return 6;
}

ssize_t test_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) 
{
    mutex_lock(&blabla_lock);
    printk("[HELLO KERNEL DRIVER]: you just write [%s] to /sys/class/hello-kernel/device0/test \n", buf);
    mutex_unlock(&blabla_lock);
    return count;
}
---------------------------------------------------------------------------

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/device.h>
#include <linux/kdev_t.h>
#include <linux/mutex.h>

struct class* hello_kernel_class;
struct device* test_device;

DEFINE_MUTEX(blabla_lock);

ssize_t test_show(struct device *dev, struct device_attribute *attr, char *buf) 
{
    mutex_lock(&blabla_lock);
    sprintf(buf, "hello\n");
    printk("[HELLO KERNEL DRIVER]: you just read /sys/class/hello-kernel/device0/test \n");
    mutex_unlock(&blabla_lock);
    return 6;
}

ssize_t test_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count) 
{
    mutex_lock(&blabla_lock);
    printk("[HELLO KERNEL DRIVER]: you just write [%s] to /sys/class/hello-kernel/device0/test \n", buf);
    mutex_unlock(&blabla_lock);
    return count;
}

DEVICE_ATTR_RW(test);

static int __init hello_init(void)
{

    printk("[HELLO KERNEL DRIVER]: module loaded\n");
    hello_kernel_class = class_create (THIS_MODULE,"hello-kernel");
    if (IS_ERR(hello_kernel_class)) {
        printk("[HELLO KERNEL DRIVER]: create hello-kernel class failed\n");
        return -1;
    }

    test_device = device_create(hello_kernel_class,NULL, MKDEV(0,0), NULL, "device0");
    if (IS_ERR(test_device)) {
        printk("[HELLO KERNEL DRIVER]: create device0 failed \n");
        class_destroy(hello_kernel_class);
        return -1;

    }

    int ret = device_create_file(test_device, &dev_attr_test);
    if (ret != 0) {
        printk("[HELLO KERNEL DRIVER]: create test file failed \n");
        device_destroy(hello_kernel_class, MKDEV(0,0));
        class_destroy(hello_kernel_class);
    }
    return 0;

}

static void __exit hello_exit(void)
{
    printk("[HELLO KERNEL]: module exited\n");
    device_remove_file(test_device, &dev_attr_test);
    device_destroy(hello_kernel_class, MKDEV(0,0));
    class_destroy(hello_kernel_class);
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Tieu Chi");
MODULE_DESCRIPTION("Hello kernel demo");
module_init(hello_init);
module_exit(hello_exit);

















